{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","data","setData","query","setQuery","page","setPage","hasMore","fetchUrl","fetchImages","axios","get","headers","then","response","results","catch","error","console","log","useEffect","className","type","onKeyDown","e","keyCode","target","value","searchImages","placeholder","dataLength","length","next","loader","endMessage","style","textAlign","map","key","src","urls","small","alt","alt_description","user","name","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAyEeA,MApEf,WACE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,QAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAwBJ,mBAAS,GAAjC,mBAAOK,EAAP,KAAaC,EAAb,KACA,EAA8BN,oBAAS,GAAvC,mBAAOO,EAAP,KAGMC,GAHN,KAGc,2DADI,8CACJ,kBAA0EL,EAA1E,iBAAwFE,IAEhGI,EAAc,WAClBC,IACGC,IAAIH,EAAU,CACbI,QAAS,KAEVC,MAAK,SAACC,GACLZ,EAAQ,GAAD,mBAAKD,GAAL,YAAca,EAASb,KAAKc,cAEpCC,OAAM,SAACC,GACNC,QAAQC,IAAIF,MAEhBX,EAAQD,EAAO,IAajB,OAJAe,qBAAU,WACRX,MACC,CAACN,IAGF,sBAAKkB,UAAU,WAAf,UACE,uBACEC,KAAK,OACLC,UAAW,SAACC,GAAD,OAfI,SAACA,GACF,KAAdA,EAAEC,UACJrB,EAASoB,EAAEE,OAAOC,OAClBzB,EAAQ,KAYY0B,CAAaJ,IAC/BK,YAAY,gDAEd,cAAC,IAAD,CACEC,WAAY7B,EAAK8B,OACjBC,KAAMvB,EACNF,QAASA,EACT0B,OAAQ,6CACRC,WACE,mBAAGC,MAAO,CAAEC,UAAW,UAAvB,SACE,4DAPN,SAWE,qBAAKf,UAAU,YAAf,SACGpB,EAAKoC,KAAI,SAACpC,EAAMqC,GAAP,OACR,sBAAKjB,UAAU,YAAf,UACE,qBACEkB,IAAKtC,EAAKuC,KAAKC,MACfpB,UAAU,QACVqB,IAAKzC,EAAK0C,kBAEZ,mEAAa1C,EAAK2C,KAAKC,UANOP,cC9C7BQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnC,MAAK,YAAkD,IAA/CoC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e049996d.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport \"./App.css\";\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [query, setQuery] = useState(\"code\");\n  const [page, setPage] = useState(1);\n  const [hasMore, setHasMore] = useState(true);\n\n  const client_id = \"TLqLC_rvefrkXow6GQTGpurBLUnrpnQDSDzaciiyziA\";\n  const fetchUrl = `https://api.unsplash.com/search/photos?client_id=${client_id}&query=${query}&page=${page}`;\n\n  const fetchImages = () => {\n    axios\n      .get(fetchUrl, {\n        headers: {},\n      })\n      .then((response) => {\n        setData([...data, ...response.data.results]);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    setPage(page + 1);\n  };\n  const searchImages = (e) => {\n    if (e.keyCode === 13) {\n      setQuery(e.target.value);\n      setData([]);\n    }\n  };\n\n  useEffect(() => {\n    fetchImages();\n  }, [query]);\n\n  return (\n    <div className=\"App flex\">\n      <input\n        type=\"text\"\n        onKeyDown={(e) => searchImages(e)}\n        placeholder=\"–ü–æ–∏—Å–∫ üîé\"\n      />\n      <InfiniteScroll\n        dataLength={data.length}\n        next={fetchImages}\n        hasMore={hasMore}\n        loader={<p>Load more...</p>}\n        endMessage={\n          <p style={{ textAlign: \"center\" }}>\n            <b>Yay! You have seen it all</b>\n          </p>\n        }\n      >\n        <div className=\"main flex\">\n          {data.map((data, key) => (\n            <div className=\"container\" key={key}>\n              <img\n                src={data.urls.small}\n                className=\"image\"\n                alt={data.alt_description}\n              />\n              <h4>–ê–≤—Ç–æ—Ä:  {data.user.name}</h4>\n            </div>\n          ))}\n        </div>\n      </InfiniteScroll>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}